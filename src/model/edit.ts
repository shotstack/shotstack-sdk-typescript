/**
 * Shotstack
 * Official Typescript SDK for the Shotstack Cloud Video Editing API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { MergeField } from './mergeField';
import { Output } from './output';
import { Timeline } from './timeline';

/**
* An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format.
*/
export class Edit {
    'timeline': Timeline;
    'output': Output;
    /**
    * An array of key/value pairs that provides an easy way to create templates with placeholders. The placeholders can be used to find and replace keys with values. For example you can search for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
    */
    'merge'?: Array<MergeField>;
    /**
    * An optional webhook callback URL used to receive status notifications when a render completes or fails. Notifications are also sent when a rendered video is sent to an output  [destination](https://shotstack.io/docs/guide/serving-assets/destinations/). See [webhooks](https://shotstack.io/docs/guide/architecting-an-application/webhooks/) for more details.
    */
    'callback'?: string;
    /**
    * **Notice: This option is now deprecated and will be removed. Disk types are handled automatically. Setting a disk type has no effect.**  The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.io/docs/guide/architecting-an-application/disk-types/) for more details. <ul>   <li>`local` - optimized for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimized for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul> 
    */
    'disk'?: Edit.DiskEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timeline",
            "baseName": "timeline",
            "type": "Timeline"
        },
        {
            "name": "output",
            "baseName": "output",
            "type": "Output"
        },
        {
            "name": "merge",
            "baseName": "merge",
            "type": "Array<MergeField>"
        },
        {
            "name": "callback",
            "baseName": "callback",
            "type": "string"
        },
        {
            "name": "disk",
            "baseName": "disk",
            "type": "Edit.DiskEnum"
        }    ];

    static getAttributeTypeMap() {
        return Edit.attributeTypeMap;
    }
}

export namespace Edit {
    export enum DiskEnum {
        LOCAL = <any> 'local',
        MOUNT = <any> 'mount'
    }
}
