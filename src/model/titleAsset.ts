/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API\'s, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it\'s own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Offset } from './offset';

/**
* **Notice: The title asset is deprecated, use the [HTML asset](#tocs_htmlasset) instead.**  The TitleAsset clip type lets you create video titles from a text string and apply styling and positioning. 
*/
export class TitleAsset {
    /**
    * The type of asset - set to `title` for titles.
    */
    'type': string = 'title';
    /**
    * The title text string - i.e. \"My Title\".
    */
    'text': string;
    /**
    * Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
    */
    'style'?: TitleAsset.StyleEnum;
    /**
    * Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
    */
    'color'?: string;
    /**
    * Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
    */
    'size'?: TitleAsset.SizeEnum;
    /**
    * Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.
    */
    'background'?: string;
    /**
    * Place the title in one of nine predefined positions of the viewport. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
    */
    'position'?: TitleAsset.PositionEnum;
    'offset'?: Offset;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "style",
            "baseName": "style",
            "type": "TitleAsset.StyleEnum"
        },
        {
            "name": "color",
            "baseName": "color",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "TitleAsset.SizeEnum"
        },
        {
            "name": "background",
            "baseName": "background",
            "type": "string"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "TitleAsset.PositionEnum"
        },
        {
            "name": "offset",
            "baseName": "offset",
            "type": "Offset"
        }    ];

    static getAttributeTypeMap() {
        return TitleAsset.attributeTypeMap;
    }
}

export namespace TitleAsset {
    export enum StyleEnum {
        MINIMAL = <any> 'minimal',
        BLOCKBUSTER = <any> 'blockbuster',
        VOGUE = <any> 'vogue',
        SKETCHY = <any> 'sketchy',
        SKINNY = <any> 'skinny',
        CHUNK = <any> 'chunk',
        CHUNK_LIGHT = <any> 'chunkLight',
        MARKER = <any> 'marker',
        FUTURE = <any> 'future',
        SUBTITLE = <any> 'subtitle'
    }
    export enum SizeEnum {
        XX_SMALL = <any> 'xx-small',
        X_SMALL = <any> 'x-small',
        SMALL = <any> 'small',
        MEDIUM = <any> 'medium',
        LARGE = <any> 'large',
        X_LARGE = <any> 'x-large',
        XX_LARGE = <any> 'xx-large'
    }
    export enum PositionEnum {
        TOP = <any> 'top',
        TOP_RIGHT = <any> 'topRight',
        RIGHT = <any> 'right',
        BOTTOM_RIGHT = <any> 'bottomRight',
        BOTTOM = <any> 'bottom',
        BOTTOM_LEFT = <any> 'bottomLeft',
        LEFT = <any> 'left',
        TOP_LEFT = <any> 'topLeft',
        CENTER = <any> 'center'
    }
}
