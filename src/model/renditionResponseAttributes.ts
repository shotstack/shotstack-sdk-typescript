/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API\'s, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it\'s own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Rendition } from './rendition';

/**
* The id and attributes of the generated rendition file.
*/
export class RenditionResponseAttributes {
    /**
    * The rendition id.
    */
    'id': string;
    /**
    * The status of the rendition transformation task. <ul>   <li>`waiting` - rendition task is waiting for source file to become available</li>   <li>`queued` - rendition task is queued waiting to be processed</li>   <li>`processing` - the rendition is being processed</li>   <li>`ready` - the rendition is ready to be downloaded</li>   <li>`failed` - there was an error creating the rendition</li>   <li>`deleted` - the rendition has been deleted</li> </ul>
    */
    'status'?: RenditionResponseAttributes.StatusEnum;
    /**
    * The URL of the rendition file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL\'s consist of a base URL (AWS bucket), owner id, source id and a file name with the rendition id and extension.
    */
    'url'?: string;
    /**
    * The time in milliseconds it took to process the rendition.
    */
    'executionTime'?: number;
    'transformation'?: Rendition;
    /**
    * The width in pixels of the ingested source file, if a video or image.
    */
    'width'?: number;
    /**
    * The height in pixels of the ingested source file, if a video or image.
    */
    'height'?: number;
    /**
    * The duration in seconds of the ingested source file, if a video or audio file.
    */
    'duration'?: number;
    /**
    * The frame rate in frames per second of the source file, if a video file.
    */
    'fps'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "RenditionResponseAttributes.StatusEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "executionTime",
            "baseName": "executionTime",
            "type": "number"
        },
        {
            "name": "transformation",
            "baseName": "transformation",
            "type": "Rendition"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "fps",
            "baseName": "fps",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return RenditionResponseAttributes.attributeTypeMap;
    }
}

export namespace RenditionResponseAttributes {
    export enum StatusEnum {
        Queued = <any> 'queued',
        Importing = <any> 'importing',
        Ready = <any> 'ready',
        Failed = <any> 'failed',
        Deleted = <any> 'deleted',
        Overwritten = <any> 'overwritten'
    }
}
