/**
 * Shotstack
 * Official Typescript SDK for the Shotstack Cloud Video Editing API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Enhancements } from './enhancements';
import { Size } from './size';
import { Speed } from './speed';

/**
* A rendition is a new output file that is generated from the source. The rendition can be encoded to a different format and have transformations applied to it such as resizing, cropping, etc...
*/
export class Rendition {
    /**
    * The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can\'t encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
    */
    'format'?: Rendition.FormatEnum;
    'size'?: Size;
    /**
    * Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
    */
    'fit'?: Rendition.FitEnum;
    /**
    * The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
    */
    'resolution'?: Rendition.ResolutionEnum;
    /**
    * Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
    */
    'quality'?: number;
    /**
    * Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
    */
    'fps'?: Rendition.FpsEnum;
    'speed'?: Speed;
    /**
    * The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
    */
    'keyframeInterval'?: number;
    'enhance'?: Enhancements;
    /**
    * A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
    */
    'filename'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "format",
            "baseName": "format",
            "type": "Rendition.FormatEnum"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "Size"
        },
        {
            "name": "fit",
            "baseName": "fit",
            "type": "Rendition.FitEnum"
        },
        {
            "name": "resolution",
            "baseName": "resolution",
            "type": "Rendition.ResolutionEnum"
        },
        {
            "name": "quality",
            "baseName": "quality",
            "type": "number"
        },
        {
            "name": "fps",
            "baseName": "fps",
            "type": "Rendition.FpsEnum"
        },
        {
            "name": "speed",
            "baseName": "speed",
            "type": "Speed"
        },
        {
            "name": "keyframeInterval",
            "baseName": "keyframeInterval",
            "type": "number"
        },
        {
            "name": "enhance",
            "baseName": "enhance",
            "type": "Enhancements"
        },
        {
            "name": "filename",
            "baseName": "filename",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Rendition.attributeTypeMap;
    }
}

export namespace Rendition {
    export enum FormatEnum {
        MP4 = <any> 'mp4',
        WEBM = <any> 'webm',
        MOV = <any> 'mov',
        AVI = <any> 'avi',
        MKV = <any> 'mkv',
        OGV = <any> 'ogv',
        WMV = <any> 'wmv',
        AVIF = <any> 'avif',
        GIF = <any> 'gif',
        MP3 = <any> 'mp3',
        WAV = <any> 'wav',
        JPG = <any> 'jpg',
        PNG = <any> 'png',
        WEBP = <any> 'webp',
        TIF = <any> 'tif'
    }
    export enum FitEnum {
        COVER = <any> 'cover',
        CONTAIN = <any> 'contain',
        CROP = <any> 'crop'
    }
    export enum ResolutionEnum {
        PREVIEW = <any> 'preview',
        MOBILE = <any> 'mobile',
        SD = <any> 'sd',
        HD = <any> 'hd',
        FHD = <any> 'fhd'
    }
    export enum FpsEnum {
        NUMBER_12 = <any> 12,
        NUMBER_15 = <any> 15,
        NUMBER_23_DOT_976 = <any> 23.976,
        NUMBER_24 = <any> 24,
        NUMBER_25 = <any> 25,
        NUMBER_29_DOT_97 = <any> 29.97,
        NUMBER_30 = <any> 30,
        NUMBER_48 = <any> 48,
        NUMBER_50 = <any> 50,
        NUMBER_59_DOT_94 = <any> 59.94,
        NUMBER_60 = <any> 60
    }
}
