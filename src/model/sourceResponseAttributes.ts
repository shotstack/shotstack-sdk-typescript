/**
 * Shotstack
 * Official Typescript SDK for the Shotstack Cloud Video Editing API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { OutputsResponse } from './outputsResponse';

/**
* The id and attributes of the source file.
*/
export class SourceResponseAttributes {
    /**
    * The source id.
    */
    'id': string;
    /**
    * The owner id of the source file.
    */
    'owner': string;
    /**
    * The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
    */
    'input'?: string;
    /**
    * The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL\'s consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
    */
    'source'?: string;
    /**
    * The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
    */
    'status'?: SourceResponseAttributes.StatusEnum;
    'outputs'?: OutputsResponse;
    /**
    * The width in pixels of the ingested source file, if a video or image.
    */
    'width'?: number;
    /**
    * The height in pixels of the ingested source file, if a video or image.
    */
    'height'?: string;
    /**
    * The duration in seconds of the ingested source file, if a video or audio file.
    */
    'duration'?: number;
    /**
    * The frame rate in frames per second of the source file, if a video file.
    */
    'fps'?: number;
    /**
    * The time the ingestion task was initially queued.
    */
    'created'?: string;
    /**
    * The time the ingestion status was last updated.
    */
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "string"
        },
        {
            "name": "input",
            "baseName": "input",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "SourceResponseAttributes.StatusEnum"
        },
        {
            "name": "outputs",
            "baseName": "outputs",
            "type": "OutputsResponse"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "fps",
            "baseName": "fps",
            "type": "number"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SourceResponseAttributes.attributeTypeMap;
    }
}

export namespace SourceResponseAttributes {
    export enum StatusEnum {
        QUEUED = <any> 'queued',
        IMPORTING = <any> 'importing',
        READY = <any> 'ready',
        FAILED = <any> 'failed',
        DELETED = <any> 'deleted',
        OVERWRITTEN = <any> 'overwritten'
    }
}
