/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API\'s, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it\'s own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { OutputsResponse } from './outputsResponse';

/**
* The id and attributes of the source file.
*/
export class SourceResponseAttributes {
    /**
    * The source id.
    */
    'id': string;
    /**
    * The owner id of the source file.
    */
    'owner': string;
    /**
    * The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
    */
    'input'?: string;
    /**
    * The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL\'s consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
    */
    'source'?: string;
    /**
    * The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
    */
    'status'?: SourceResponseAttributes.StatusEnum;
    'outputs'?: OutputsResponse;
    /**
    * The width in pixels of the ingested source file, if a video or image.
    */
    'width'?: number;
    /**
    * The height in pixels of the ingested source file, if a video or image.
    */
    'height'?: string;
    /**
    * The duration in seconds of the ingested source file, if a video or audio file.
    */
    'duration'?: number;
    /**
    * The frame rate in frames per second of the source file, if a video file.
    */
    'fps'?: number;
    /**
    * The time the ingestion task was initially queued.
    */
    'created'?: string;
    /**
    * The time the ingestion status was last updated.
    */
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "string"
        },
        {
            "name": "input",
            "baseName": "input",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "SourceResponseAttributes.StatusEnum"
        },
        {
            "name": "outputs",
            "baseName": "outputs",
            "type": "OutputsResponse"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "fps",
            "baseName": "fps",
            "type": "number"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SourceResponseAttributes.attributeTypeMap;
    }
}

export namespace SourceResponseAttributes {
    export enum StatusEnum {
        QUEUED = <any> 'queued',
        IMPORTING = <any> 'importing',
        READY = <any> 'ready',
        FAILED = <any> 'failed',
        DELETED = <any> 'deleted',
        OVERWRITTEN = <any> 'overwritten'
    }
}
