/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API\'s, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it\'s own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Edit } from './edit';

/**
* The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
*/
export class RenderResponseData {
    /**
    * The id of the render task in UUID format.
    */
    'id': string;
    /**
    * The owner id of the render task.
    */
    'owner': string;
    /**
    * The customer subscription plan.
    */
    'plan'?: string;
    /**
    * The status of the render task. <ul>   <li>`queued` - render is queued waiting to be rendered</li>   <li>`fetching` - assets are being fetched</li>   <li>`rendering` - the asset is being rendered</li>   <li>`saving` - the final asset is being saved to storage</li>   <li>`done` - the asset is ready to be downloaded</li>   <li>`failed` - there was an error rendering the asset</li> </ul>
    */
    'status': RenderResponseData.StatusEnum;
    /**
    * An error message, only displayed if an error occurred.
    */
    'error'?: string;
    /**
    * The output video or audio length in seconds.
    */
    'duration'?: number;
    /**
    * The time taken to render the asset in milliseconds.
    */
    'renderTime'?: number;
    /**
    * The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
    */
    'url'?: string;
    /**
    * The URL of the poster image if requested. This will only be available if status is done.
    */
    'poster'?: string | null;
    /**
    * The URL of the thumbnail image if requested. This will only be available if status is done.
    */
    'thumbnail'?: string | null;
    'data'?: Edit;
    /**
    * The time the render task was initially queued.
    */
    'created'?: string;
    /**
    * The time the render status was last updated.
    */
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "string"
        },
        {
            "name": "plan",
            "baseName": "plan",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "RenderResponseData.StatusEnum"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "renderTime",
            "baseName": "renderTime",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "poster",
            "baseName": "poster",
            "type": "string"
        },
        {
            "name": "thumbnail",
            "baseName": "thumbnail",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Edit"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return RenderResponseData.attributeTypeMap;
    }
}

export namespace RenderResponseData {
    export enum StatusEnum {
        Queued = <any> 'queued',
        Fetching = <any> 'fetching',
        Rendering = <any> 'rendering',
        Saving = <any> 'saving',
        Done = <any> 'done',
        Failed = <any> 'failed'
    }
}
