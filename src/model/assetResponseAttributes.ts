/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API\'s, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it\'s own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* The list of asset attributes and their values.
*/
export class AssetResponseAttributes {
    /**
    * The unique id of the hosted asset in UUID format.
    */
    'id': string;
    /**
    * The owner id of the render task.
    */
    'owner': string;
    /**
    * The region the asset is hosted, currently only `au` (Australia).
    */
    'region'?: string;
    /**
    * The original render id that created the asset in UUID format. Multiple assets can share the same render id.
    */
    'renderId'?: string;
    /**
    * The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
    */
    'providerId'?: string;
    /**
    * The asset file name.
    */
    'filename'?: string;
    /**
    * The asset file name.
    */
    'url'?: string;
    /**
    * The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
    */
    'status': AssetResponseAttributes.StatusEnum;
    /**
    * The time the asset was created.
    */
    'created'?: string;
    /**
    * The time the asset status was last updated.
    */
    'updated'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "string"
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string"
        },
        {
            "name": "renderId",
            "baseName": "renderId",
            "type": "string"
        },
        {
            "name": "providerId",
            "baseName": "providerId",
            "type": "string"
        },
        {
            "name": "filename",
            "baseName": "filename",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AssetResponseAttributes.StatusEnum"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "string"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AssetResponseAttributes.attributeTypeMap;
    }
}

export namespace AssetResponseAttributes {
    export enum StatusEnum {
        IMPORTING = <any> 'importing',
        READY = <any> 'ready',
        FAILED = <any> 'failed',
        DELETED = <any> 'deleted'
    }
}
